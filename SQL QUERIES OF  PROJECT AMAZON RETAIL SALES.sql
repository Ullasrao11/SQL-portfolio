RENAME TABLE `AMAZON RETAIL SALES` TO `SALESs`;
SELECT *FROM SALESS;

# REMOVE SPACES FROM COLUMN HEADER IN SALES TABLE
ALTER TABLE SALESS CHANGE `ORDER ID` ORDER_ID TEXT(20);
ALTER TABLE SALESS CHANGE `ORDER DATE` ORDER_DATE TEXT(20);
ALTER TABLE SALESS CHANGE `SHIP DATE` SHIP_DATE TEXT(20);
ALTER TABLE SALESS CHANGE `SHIP MODE` SHIP_MODE TEXT(20);
ALTER TABLE SALESS CHANGE `CUSTOMER ID` CUSTOMER_ID TEXT(20);
ALTER TABLE SALESS CHANGE `CUSTOMER NAME` CUSTOMER_NAME TEXT(20);
ALTER TABLE SALESS CHANGE `POSTAL CODE` POSTAL_CODE INT;
ALTER TABLE SALESS CHANGE `PRODUCT ID` PRODUCT_ID TEXT(20);
ALTER TABLE SALESS CHANGE `SUB-CATEGORY` SUB_CATEGORY TEXT(20);
ALTER TABLE SALESS CHANGE `PRODUCT NAME` PRODUCT_NAME TEXT(20);
SELECT *FROM SALESS;
DESC SALESS;

# CONVERT ORDER DATE FROM TEXT TO DATE DATATYPE
SET SQL_SAFE_UPDATES=0;
UPDATE SALESS SET ORDER_DATE=STR_TO_DATE(ORDER_DATE,'%D-%M-%Y');
UPDATE SALESS SET ORDER_DATE=CASE 
                            WHEN ORDER_DATE LIKE '%-%-%' THEN STR_TO_DATE(ORDER_DATE, '%d-%m-%Y')
                            WHEN ORDER_DATE LIKE '%/%/%' THEN STR_TO_DATE(ORDER_DATE, '%d/%m/%Y')
                            ELSE NULL 
                            END;
ALTER TABLE SALESS MODIFY ORDER_DATE DATE;  

# TOP 5 DATES ON WHICH THE HIGHEST SALES WAS GENERATED
SELECT ORDER_DATE AS DATES,ROUND(SUM(SALES),2) AS TOTAL_SALES  FROM SALESS 
GROUP BY ORDER_DATE ORDER BY TOTAL_SALES DESC LIMIT 5;

# CALCULATE TOTAL SALES PER MONTH 
SELECT YEAR(ORDER_DATE) AS YEARS,MONTH(ORDER_DATE) AS MONTHS,MONTHNAME(ORDER_DATE)AS MONTH_NAMES,ROUND(SUM(SALES),2) AS TOTAL_SALES 
FROM SALESS GROUP BY YEARS,MONTHS,MONTH_NAMES ORDER BY YEARS,MONTHS,MONTH_NAMES;

# WHAT IS THE AVERAGE SALES OF THE EACH REGION IN 2017
SELECT REGION,FLOOR(AVG(SALES)) AS AVG_SALES FROM SALESS WHERE YEAR(ORDER_DATE)=2017 
GROUP BY REGION ORDER BY AVG_SALES;

# WHICH STATES HAD THE MAXIMUM AND MINIMUM SALES IN 2016?
(SELECT STATE,ROUND(SUM(SALES),2) AS TOTAL_SALES FROM SALESS WHERE YEAR(ORDER_DATE)=2016 GROUP BY STATE ORDER BY TOTAL_SALES DESC LIMIT 1)
UNION
(SELECT STATE,SUM(SALES) AS TOTAL_SALES FROM SALESS WHERE YEAR(ORDER_DATE)=2016 GROUP BY STATE ORDER BY TOTAL_SALES ASC LIMIT 1);

# WHAT IS THE TOTAL SALES AND PROFIT IN EACH OF THE REGIONS IN 2015?
SELECT REGION,ROUND(SUM(SALES),2) AS TOTAL_SALES,round(SUM(PROFIT),2) AS TOTAL_PROFIT FROM SALESS WHERE YEAR(ORDER_DATE)=2015
GROUP BY REGION ORDER BY TOTAL_SALES DESC;

# YOY GROWTH
SELECT YEAR(ORDER_DATE) AS YEARS,SUM(SALES) AS TOTAL_SALES,LAG(SUM(SALES))
OVER(ORDER BY YEAR(ORDER_DATE)) AS PREVIOUS_YEAR_SALES,
CONCAT(
	FORMAT(
		( SUM(SALES)-LAG(SUM(SALES)) OVER(ORDER BY YEAR(ORDER_DATE))) /
        LAG(SUM(SALES)) OVER (ORDER BY YEAR(ORDER_DATE)) * 100,2
        ),
        '%'
	) AS YOY_GROWTH_PERCENT FROM SALESS GROUP BY YEAR(ORDER_DATE) ORDER BY YEAR(ORDER_DATE);
    
    # DAILY REPORT ( INDIVUDUAL DAY TOTAL SALES)
    SELECT DATE(ORDER_DATE) AS DAYS,SUM(SALES) AS TOTAL_SALES FROM SALESS GROUP BY DATE(ORDER_DATE) ORDER BY DAYS;
    
    # WEEKLY WISE TOTAL SALES                   NOTE : HERE WEEK(ORDER_DATE,1) MEANS DAY STARTS FROM MONDAY
    SELECT YEAR(ORDER_DATE) AS YEARS,WEEK(ORDER_DATE,1) AS WEEKS,SUM(SALES) AS TOTAL_SALES FROM SALESS 
    GROUP BY YEARS,WEEKS ORDER BY WEEKS;
    
    # MONTHLY WISE TOTAL SALES
     SELECT YEAR(ORDER_DATE) AS YEARS,MONTH(ORDER_DATE) AS MONTHS,SUM(SALES) AS TOTAL_SALES FROM SALESS 
    GROUP BY YEARS,MONTHS ORDER BY MONTHS;
    
    # QUARTERWISE TOTAL SALES
    SELECT YEAR(ORDER_DATE) AS YEARS,QUARTER(ORDER_DATE) AS QUARTERS,SUM(SALES) AS TOTAL_SALES FROM SALESS 
    GROUP BY YEARS,QUARTERS ORDER BY QUARTERS;
    
    # YEARWISE SALES
    SELECT YEAR(ORDER_DATE) AS YEARS,SUM(SALES) AS TOTAL_SALES FROM SALESS
    GROUP BY YEARS ORDER BY YEARS;
    
    # -7 DAYS
    use ecommerce_project;
    select order_date,sum(sales) as total_sales FROM SALESS WHERE ORDER_DATE >= CURDATE() -INTERVAL 7 day
    GROUP BY ORDER_DATE ORDER BY ORDER_DATE;
    
    # BETWEEN SALES
    select order_date,sum(sales) as total_sales FROM SALESS WHERE ORDER_DATE BETWEEN DATE('2014-11-15') AND DATE('2014-11-20')
    GROUP BY ORDER_DATE ORDER BY ORDER_DATE;
    
    # 3 MONTHS SALES REPORT JAN,FEB,MAR FOR YEAR 2015
    SELECT ORDER_DATE,CATEGORY,SUM(SALES) FROM SALESS WHERE YEAR(ORDER_DATE)=2015 AND MONTH(ORDER_DATE) IN(1,2,3)
    GROUP BY ORDER_DATE,CATEGORY ORDER BY ORDER_DATE,CATEGORY;
    
    # CHECK THE BLANK VALUE IN EACH COLUMN
SELECT *FROM SALES WHERE ORDER_ID='' OR CUSTOMER_ID='' OR PRODUCT_ID='';

# CHECK THE NULL VALUES IN THE TABLE
SELECT *FROM SALES WHERE ORDER_ID IS NULL OR PRODUCT_ID IS NULL OR CUSTOMER_ID IS NULL;

# FIND THE DUPLICATES
SELECT ORDER_ID,PRODUCT_ID,COUNT(*) FROM SALES GROUP BY ORDER_ID,PRODUCT_ID HAVING COUNT(*)>1;

# DISPLAY THE UNIQUE NO.OF ORDERS,CUSTOMERS,CITIES,AND STATES
SELECT COUNT(DISTINCT(ORDER_ID))AS TOTAL_ORDERS,
       COUNT(DISTINCT(CUSTOMER_NAME)) AS TOTAL_CUSTOMERS,
       COUNT(DISTINCT(CITY)) AS NO_OF_CITIES,
       COUNT(DISTINCT(STATE)) AS NO_OF_STATES
       FROM SALES;
       
# DETERMINE THE NO.OF PRODUCT SOLD AND NO.OF CUSTOMERS AND TOP 10 PROFITABLE STATES AND CITIES.
SELECT STATE,CITY,COUNT(DISTINCT(CUSTOMER_NAME)) AS NO_OF_CUSTOMERS,SUM(QUANTITY) AS PRODUCT_SOLD,ROUND(SUM(PROFIT),2) AS TOTAL_PROFIT
FROM SALES GROUP BY STATE,CITY ORDER BY TOTAL_PROFIT DESC LIMIT 10;

# TOP 5 CUSTOMERS WITH THE MOST NO.OF ORDERS
SELECT DISTINCT(CUSTOMER_NAME) AS NO_OF_CUSTOMERS,COUNT(DISTINCT(ORDER_ID)) AS NO_OF_ORDERS FROM SALES
GROUP BY CUSTOMER_NAME ORDER BY NO_OF_ORDERS DESC LIMIT 5;

# TOP 5 CITIES WITH NO.OF ORDERS
SELECT DISTINCT(CITY) AS NO_OF_CITIES,COUNT(DISTINCT(ORDER_ID)) AS NO_OF_ORDERS FROM SALES
GROUP BY CITY ORDER BY NO_OF_ORDERS DESC LIMIT 5;

# TOP 5 STATES WITH THE MOST NO.OF ORDERS
SELECT DISTINCT(STATE) AS NO_OF_STATES,COUNT(DISTINCT(ORDER_ID)) AS NO_OF_ORDERS FROM SALES
GROUP BY STATE ORDER BY NO_OF_ORDERS DESC LIMIT 5;